syntax = "proto3";

package buildstream;

import "build/bazel/remote/execution/v2/remote_execution.proto";
import "google/api/annotations.proto";

service ArtifactCache {
  // Retrieve a cached artifact.
  //
  // Errors:
  // * `NOT_FOUND`: The requested `ActionResult` is not in the cache.
  rpc GetArtifact(GetArtifactRequest) returns (GetArtifactResponse) {
    option (google.api.http) = { get: "/v1test/{instance_name=**}/buildstream/artifacts/{key}" };
  }

  // Associate a cache key with a CAS build artifact.
  //
  // Errors:
  // * `RESOURCE_EXHAUSTED`: There is insufficient storage space to add the
  //   entry to the cache.
  rpc UpdateArtifact(UpdateArtifactRequest) returns (UpdateArtifactResponse) {
    option (google.api.http) = { put: "/v1test/{instance_name=**}/buildstream/artifacts/{key}" body: "artifact" };
  }

  rpc Status(StatusRequest) returns (StatusResponse) {
    option (google.api.http) = { put: "/v1test/{instance_name=**}/buildstream/artifacts:status" };
  }
}

message GetArtifactRequest {
  // The instance of the execution system to operate against. A server may
  // support multiple instances of the execution system (with their own workers,
  // storage, caches, etc.). The server MAY require use of this field to select
  // between them in an implementation-defined fashion, otherwise it can be
  // omitted.
  string instance_name = 1;

  // The BuildStream cache key.
  string key = 2;
}

message GetArtifactResponse {
  // The digest of the artifact [Directory][build.bazel.remote.execution.v2.Directory].
  build.bazel.remote.execution.v2.Digest artifact = 1;
}

message UpdateArtifactRequest {
  // The instance of the execution system to operate against. A server may
  // support multiple instances of the execution system (with their own workers,
  // storage, caches, etc.). The server MAY require use of this field to select
  // between them in an implementation-defined fashion, otherwise it can be
  // omitted.
  string instance_name = 1;

  // The BuildStream cache key.
  repeated string keys = 2;

  // The digest of the artifact [Directory][build.bazel.remote.execution.v2.Directory]
  // to store in the cache.
  build.bazel.remote.execution.v2.Digest artifact = 3;
}

message UpdateArtifactResponse {
}

message StatusRequest {
  // The instance of the execution system to operate against. A server may
  // support multiple instances of the execution system (with their own workers,
  // storage, caches, etc.). The server MAY require use of this field to select
  // between them in an implementation-defined fashion, otherwise it can be
  // omitted.
  string instance_name = 1;
}

message StatusResponse {
  bool allow_updates = 1;
}
